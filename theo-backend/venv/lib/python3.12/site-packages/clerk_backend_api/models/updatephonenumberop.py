"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdatePhoneNumberRequestBodyTypedDict(TypedDict):
    verified: NotRequired[Nullable[bool]]
    r"""The phone number will be marked as verified."""
    primary: NotRequired[Nullable[bool]]
    r"""Set this phone number as the primary phone number for the user."""
    reserved_for_second_factor: NotRequired[Nullable[bool]]
    r"""Set this phone number as reserved for multi-factor authentication.
    The phone number must also be verified.
    If there are no other reserved second factors, the phone number will be set as the default second factor.
    """


class UpdatePhoneNumberRequestBody(BaseModel):
    verified: OptionalNullable[bool] = UNSET
    r"""The phone number will be marked as verified."""

    primary: OptionalNullable[bool] = UNSET
    r"""Set this phone number as the primary phone number for the user."""

    reserved_for_second_factor: OptionalNullable[bool] = UNSET
    r"""Set this phone number as reserved for multi-factor authentication.
    The phone number must also be verified.
    If there are no other reserved second factors, the phone number will be set as the default second factor.
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["verified", "primary", "reserved_for_second_factor"]
        nullable_fields = ["verified", "primary", "reserved_for_second_factor"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdatePhoneNumberRequestTypedDict(TypedDict):
    phone_number_id: str
    r"""The ID of the phone number to update"""
    request_body: NotRequired[UpdatePhoneNumberRequestBodyTypedDict]


class UpdatePhoneNumberRequest(BaseModel):
    phone_number_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The ID of the phone number to update"""

    request_body: Annotated[
        Optional[UpdatePhoneNumberRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None

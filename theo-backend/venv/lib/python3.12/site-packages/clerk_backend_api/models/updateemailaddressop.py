"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateEmailAddressRequestBodyTypedDict(TypedDict):
    verified: NotRequired[Nullable[bool]]
    r"""The email address will be marked as verified."""
    primary: NotRequired[Nullable[bool]]
    r"""Set this email address as the primary email address for the user."""


class UpdateEmailAddressRequestBody(BaseModel):
    verified: OptionalNullable[bool] = UNSET
    r"""The email address will be marked as verified."""

    primary: OptionalNullable[bool] = UNSET
    r"""Set this email address as the primary email address for the user."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["verified", "primary"]
        nullable_fields = ["verified", "primary"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class UpdateEmailAddressRequestTypedDict(TypedDict):
    email_address_id: str
    r"""The ID of the email address to update"""
    request_body: NotRequired[UpdateEmailAddressRequestBodyTypedDict]


class UpdateEmailAddressRequest(BaseModel):
    email_address_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The ID of the email address to update"""

    request_body: Annotated[
        Optional[UpdateEmailAddressRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None

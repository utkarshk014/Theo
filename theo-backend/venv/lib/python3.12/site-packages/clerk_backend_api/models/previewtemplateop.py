"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from clerk_backend_api.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from clerk_backend_api.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PreviewTemplateRequestBodyTypedDict(TypedDict):
    r"""Required parameters"""

    subject: NotRequired[Nullable[str]]
    r"""The email subject.
    Applicable only to email templates.
    """
    body: NotRequired[str]
    r"""The template body before variable interpolation"""
    from_email_name: NotRequired[str]
    r"""The local part of the From email address that will be used for emails.
    For example, in the address 'hello@example.com', the local part is 'hello'.
    Applicable only to email templates.
    """
    reply_to_email_name: NotRequired[str]
    r"""The local part of the Reply To email address that will be used for emails.
    For example, in the address 'hello@example.com', the local part is 'hello'.
    Applicable only to email templates.
    """


class PreviewTemplateRequestBody(BaseModel):
    r"""Required parameters"""

    subject: OptionalNullable[str] = UNSET
    r"""The email subject.
    Applicable only to email templates.
    """

    body: Optional[str] = None
    r"""The template body before variable interpolation"""

    from_email_name: Optional[str] = None
    r"""The local part of the From email address that will be used for emails.
    For example, in the address 'hello@example.com', the local part is 'hello'.
    Applicable only to email templates.
    """

    reply_to_email_name: Optional[str] = None
    r"""The local part of the Reply To email address that will be used for emails.
    For example, in the address 'hello@example.com', the local part is 'hello'.
    Applicable only to email templates.
    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["subject", "body", "from_email_name", "reply_to_email_name"]
        nullable_fields = ["subject"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PreviewTemplateRequestTypedDict(TypedDict):
    template_type: str
    r"""The type of template to preview"""
    slug: str
    r"""The slug of the template to preview"""
    request_body: NotRequired[PreviewTemplateRequestBodyTypedDict]
    r"""Required parameters"""


class PreviewTemplateRequest(BaseModel):
    template_type: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The type of template to preview"""

    slug: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The slug of the template to preview"""

    request_body: Annotated[
        Optional[PreviewTemplateRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
    r"""Required parameters"""


class PreviewTemplateResponseBodyTypedDict(TypedDict):
    r"""OK"""


class PreviewTemplateResponseBody(BaseModel):
    r"""OK"""
